<?xml version='1.0' encoding='utf8'?>
<!--
	Profile: Sweetnewt (7923)
	Authors: miss-aoi
-->
<!DOCTYPE Profile [
	<!-- Adjust to desired amount -->
	<!ENTITY Sweetnewt "5">
]>
<Profile>
	<Name>Sweetnewt</Name>
	<BehaviorDirectory />
	<Order>
		<Log Message="Starting Fishing: Sweetnewt..." />
		<If condition="not HasAtLeast(2592,50)">
			<!--Midge Basket-->
			<Lisbeth IgnoreHome="True" Json="[{'Group':1,'Item':2592,'Amount':50,'Enabled':true,'Type':'Purchase'}]" />
		</If>
		<If condition="not IsOnSubMap(476)">
			<LisbethTravel Area="Gridania (New Gridania)" XYZ="35.11273, 2.200001, 32.23121" />
			<RunCode Name="TheLavenderBeds"/>
			<LisbethTravel ZoneId="340" XYZ="7.277023, 2.610901, 199.8097"/>
		</If>
		<If condition="not ClassName == ClassJobType.Fisher">
			<ChangeClass Job="Fisher" />
		</If>
		<While condition="IsTimeBetween(22,23)">
			<Log Message="Waiting for window to open..." />
                        <WaitTimer WaitTime="30" />
		</While>
		<ExFish Bait="Midge Basket" condition="not HasAtLeast(7923,&Sweetnewt;) and HasAtLeast(2592,1) and (IsTimeBetween(23,24) or IsTimeBetween(0,4)) and ExBuddy.Helpers.SkywatcherPlugin.IsWeatherInZone(340, 'Fog')" MinFish="15" MaxFish="25" ShuffleFishSpots="True" ThaliaksFavor="True" CordialType="Auto" Sit="True" Mooch="2" Patience="Patience2" MinimumGPPatience="650">
			<PatientTugs>
				<PatienceTug moochLevel="0" TugType="Light" />
				<PatienceTug moochLevel="1" TugType="Medium" />
			</PatientTugs>
			<FishSpots>
			<FishSpot XYZ="-6.899338, 1.154556, 192.6779" Heading="4.952633" />
			<FishSpot XYZ="17.03964, 2.610861, 215.6596" Heading="0.5292695" />
			<FishSpot XYZ="8.996038, 2.61084, 195.7229" Heading="2.25086" />
			</FishSpots>
			<Keepers>
			<Keeper name="Sweetnewt" />
			</Keepers>
		<SurfaceSlaps />
		</ExFish>
		<LLoadProfile Path="../../Start.xml" />
	</Order>
	<GrindAreas />
	<CodeChunks>
		<CodeChunk Name="TheLavenderBeds">
			<![CDATA[ 
				var unit = GameObjectManager.GetObjectByNPCId(2);
				unit.Target();
				unit.Interact();
				await Coroutine.Sleep(1000);
				await Coroutine.Wait(5000, () => SelectString.IsOpen);
				await Coroutine.Sleep(500);
				if (SelectString.IsOpen)
					SelectString.ClickSlot(1);
				await Coroutine.Sleep(500);
				await Coroutine.Wait(5000, () => SelectString.IsOpen);
				await Coroutine.Sleep(500);
				if (SelectString.IsOpen)
					SelectString.ClickSlot(2);
				await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null);

				if (RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null)
				{
					RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock").SendAction(1, 3, 0);
					await Coroutine.Wait(5000, () => SelectYesno.IsOpen);
					if (SelectYesno.IsOpen)
						SelectYesno.Yes();
					await Coroutine.Sleep(5000);
					if (CommonBehaviors.IsLoading)
						await Coroutine.Wait(-1, () => !CommonBehaviors.IsLoading);
				}
			]]>
		</CodeChunk>
	</CodeChunks>
</Profile>