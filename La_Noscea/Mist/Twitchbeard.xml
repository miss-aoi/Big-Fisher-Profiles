<?xml version='1.0' encoding='utf8'?>
<!--
	Profile: Twitchbeard (7917)
	Authors: miss-aoi
-->
<!DOCTYPE Profile [
	<!-- Adjust to desired amount -->
	<!ENTITY Twitchbeard "5">
]>
<Profile>
	<Name>Twitchbeard</Name>
	<BehaviorDirectory />
	<Order>
		<Log Message="Starting Fishing: Twitchbeard..." />
		<If condition="not HasAtLeast(2596,50)">
			<!--Spoon Worm-->
			<Lisbeth IgnoreHome="True" Json="[{'Group':1,'Item':2596,'Amount':50,'Enabled':true,'Type':'Purchase'}]" />
		</If>
		<If condition="not IsOnSubMap(1203)">
			<LisbethTravel Area="Limsa Lominsa (Lower Decks)" XYZ="-81.17178, 18.864, -4.033834" />
			<RunCode Name="Mists"/>
			<LisbethTravel ZoneId="339" XYZ="-63.83141, 1.999999, 73.22429" />
		</If>
		<If condition="not ClassName == ClassJobType.Fisher">
			<ChangeClass Job="Fisher" />
		</If>
		<While condition="IsTimeBetween(3,4)">
			<Log Message="Waiting for window to open..." />
			<WaitTimer WaitTime="30" />
		</While>
		<ExFish Bait="Spoon Worm" condition="not HasAtLeast(7917,&Twitchbeard;) and HasAtLeast(2596,1) and IsTimeBetween(4,6) and ExBuddy.Helpers.SkywatcherPlugin.IsWeatherInZone(339, 'Clear Skies', 'Fair Skies')" MinFish="15" MaxFish="25" ShuffleFishSpots="True" ThaliaksFavor="True" CordialType="Auto" Mooch="2" Patience="Patience2" MinimumGPPatience="650">
			<PatientTugs>
				<PatienceTug moochLevel="0" TugType="Light" />
				<PatienceTug moochLevel="1" TugType="Medium" />
			</PatientTugs>
			<FishSpots>
				<FishSpot XYZ="-39.94213, -0.2998141, 77.95563" Heading="0.2739866" />
				<FishSpot XYZ="-64.23476, -0.4460256, 132.4761" Heading="0.07711339" />
				<FishSpot XYZ="-89.91607, -0.3917423, 67.00573" Heading="5.34662" />
			</FishSpots>
			<Keepers>
				<Keeper name="Twitchbeard" />
			</Keepers>
			<SurfaceSlaps />
		</ExFish>
		<LLoadProfile Path="../../Start.xml" />
	</Order>
	<GrindAreas />
	<CodeChunks>
		<CodeChunk Name="Mists">
			<![CDATA[ 
				var unit = GameObjectManager.GetObjectByNPCId(8);
				unit.Target();
				unit.Interact();
				await Coroutine.Sleep(1000);
				await Coroutine.Wait(5000, () => SelectString.IsOpen);
				await Coroutine.Sleep(500);
				if (SelectString.IsOpen)
					SelectString.ClickSlot(1);
				await Coroutine.Sleep(500);
				await Coroutine.Wait(5000, () => SelectString.IsOpen);
				await Coroutine.Sleep(500);
				if (SelectString.IsOpen)
					SelectString.ClickSlot(2);
				await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null);

				if (RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock") != null)
				{
					RaptureAtkUnitManager.GetWindowByName("HousingSelectBlock").SendAction(1, 3, 0);
					await Coroutine.Wait(5000, () => SelectYesno.IsOpen);
					if (SelectYesno.IsOpen)
						SelectYesno.Yes();
					await Coroutine.Sleep(5000);
					if (CommonBehaviors.IsLoading) 
						await Coroutine.Wait(-1, () => !CommonBehaviors.IsLoading);
				}
			]]>
		</CodeChunk>
	</CodeChunks>
</Profile>